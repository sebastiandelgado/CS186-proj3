STEP 3: simpledb.Parser.handleQueryStatement()

simpledb.Parser.handleQueryStatement() generates a physical plan by first calling simpledb.Parser.parseQueryLogicalPlan() to generate a logical plan and then calling simpledb.LogicalPlan.physicalPlan() on said logical plan. It then attaches the logical and physcal plans to a new query that it returns to simpledb.Parser.processNextStatement. 

STEP 4: simpledb.Parser.parseQueryLogicalPlan()

parseQueryLogicalPlan initializes a virgin simpledb.LogicalPlan and then 
(1) adds logical scan nodes to the logical plan of all of the tables in the FROM statement, 
(2) parses the WHERE clause, creating and adding filter and join nodes to the logical plan using simpledb.Parser.processExpression(), 
(3) sets a single, valid GROUP BY field, if there is one, 
(4) looks at the SELECT list and adds the fields that need projecting to the logical plan, including an aggregate function to the fields that have one, and finally 
(5) adds the order by field and order (ASC/DESC) to the logical plan

Step (2) deserves more explanation: processExpression() basically determines what is in the WHERE clause to add a filter node with a particular column, operation and comparison value to the logical plan or a join node with each table's field and the operation used to join. It also calls itself to process AND expressions.

At this point, the logical plan for the query has (1) scan nodes for the tables in the query, (2) filter and join nodes, (3) a valid GROUP BY field, (4) list of fields to project (with aggregates) and (5) sorting information.

STEP 5: simpledb.LogicalPlan.physicalPlan()

This step is called by Parser.handleQueryStatement() in step 3 to spawn a physical plan from the logical plan created in step 4. Here is where the parameters established in the logical plan are optimized to generate a concrete and efficient plan for execution. It does the following to achieve this:

(1) For every table mentioned in the FROM clause, it initializes a sequential scan of the table and adds it to the subplan, it adds the stats of that table generated in step 1 to a map of its own and it sets the filter selectivity for that table to 1.0 (thus expressing the assumption that all the records will be looked at)
(2) For every filter node in the logical plan, it replaces the scan subplan for the table the filter node acts on with a simpledb.Filter (DbIterator) that takes the appropriate filtering actions on the current subplan for that table. Then it uses the table stats to adjust the filter selectivity to reflect the proportion of records that will be filtered out.
(3) For every join node in the logical plan, it checks if either of the tables to join are also being joined with another table in order to proceed with the join(s) instead of the table(s). It then grabs the current subplans for those tables (or joins). If one of the subplans is a join itself, then it grabs the subplan of that instead. Finally, it instantiates a join iterator with the two plans, adds it to the subplanMap under the name of the first table and removes the second table from the subplanMap (since the entries of the second table will appear in the join).

At this point, there should be a single subplan in the subplanMap. All of the filters should have been applied and the joins should have brought the different tables down to a single one.

(4) It creates a DbIterator out of the single subplan called "node"
(5) It walks the SELECT fields determining which fields (and of which types) to project. 
(6) If there are any aggregates, it resets "node" to a simpledb.Aggregate DbIterator initialized with itself and the appropriate operation, GROUP BY field and field index.
(7) Similarly, if there is an ORDER BY clause, it willl reset "node" to a simpledb.OrderBy DbIterator initialized with itself and the appropriate parameters
(8) It will generate and return a new simpledb.Projection using the "node" dbIterator and the appropriate projection fields determined in part (5)

STEP 6: EXECUTION

Once the physical and logical plans are in place, handleQueryStatement returns and processNextStatement() calls query.execute (as specified in step 2). This causes the query print the header for the table and then make next() calls to the physical plan, printing the output records until it is empty. As each call is made to the physical plan, it then makes calls to all the other DbIterators that compose it, all the way down to the scans!
